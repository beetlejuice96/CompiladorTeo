// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: EjemploLexico.flex

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {
	private List<Token> listaToken = new ArrayList(); 

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\1\1\23\0\1\1\1\2\1\3"+
    "\2\0\1\4\1\5\1\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\12\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\0\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\0\1\34\1\0\1\35"+
    "\1\36\2\0\1\37\1\40\1\41\1\42\1\0\1\43"+
    "\3\0\1\44\1\0\1\45\1\46\1\47\1\0\32\50"+
    "\1\51\1\52\1\53\1\54\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\1\1\17\5\1\1\20\1\21\1\22"+
    "\1\1\1\23\1\24\1\25\1\0\1\26\1\0\1\27"+
    "\1\30\1\0\1\31\1\32\1\33\3\0\1\34\2\0"+
    "\1\35\16\0\1\36\3\0\1\37\7\0\1\40\6\0"+
    "\1\41\1\42\73\0\1\43\34\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\55\0\132\0\207\0\55\0\264\0\55"+
    "\0\55\0\55\0\55\0\55\0\55\0\341\0\55\0\u010e"+
    "\0\u013b\0\55\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\55\0\u02d0\0\55\0\u02fd\0\55\0\55"+
    "\0\55\0\207\0\55\0\u032a\0\55\0\55\0\u0357\0\55"+
    "\0\55\0\55\0\u0384\0\u03b1\0\u03de\0\55\0\u040b\0\u0438"+
    "\0\55\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\55"+
    "\0\u06db\0\u0708\0\u0735\0\u0519\0\u0762\0\u078f\0\u07bc\0\u07e9"+
    "\0\u0816\0\u0843\0\u0870\0\55\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\55\0\55\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a"+
    "\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2"+
    "\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a"+
    "\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\55"+
    "\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545"+
    "\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad"+
    "\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815"+
    "\0\u1842\0\u186f\0\u189c\0\u18c9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\2\1\26\1\2\1\27"+
    "\2\2\1\30\5\2\1\31\1\2\1\32\2\2\1\33"+
    "\1\2\1\34\1\35\1\36\1\37\1\40\77\0\1\41"+
    "\33\0\1\42\1\0\1\43\12\0\1\42\30\0\1\44"+
    "\1\42\11\0\1\45\65\0\1\16\52\0\1\16\1\0"+
    "\1\20\60\0\1\46\47\0\1\47\4\0\1\50\54\0"+
    "\1\51\54\0\1\52\61\0\1\53\51\0\1\54\11\0"+
    "\1\55\46\0\1\56\63\0\1\57\47\0\1\60\40\0"+
    "\1\34\30\0\2\34\56\0\1\61\15\0\1\42\42\0"+
    "\1\47\1\62\1\63\1\47\1\64\7\47\1\65\1\47"+
    "\1\62\1\47\1\66\1\62\1\66\2\0\1\67\1\0"+
    "\1\70\2\0\1\71\5\0\1\72\1\0\1\73\2\0"+
    "\1\47\1\0\1\74\1\47\1\75\2\47\25\0\1\76"+
    "\63\0\1\77\57\0\1\100\57\0\1\101\45\0\1\102"+
    "\43\0\1\47\33\0\1\63\1\0\1\47\12\0\1\63"+
    "\30\0\1\103\1\63\11\0\1\47\50\0\1\47\1\62"+
    "\1\63\1\47\1\64\7\47\1\65\1\47\1\62\1\47"+
    "\1\66\1\62\1\104\2\0\1\67\1\0\1\70\2\0"+
    "\1\71\5\0\1\72\1\0\1\73\2\0\1\47\1\0"+
    "\1\74\1\47\1\75\2\47\1\0\1\47\1\62\1\63"+
    "\1\47\1\64\7\47\1\65\1\47\1\62\1\47\3\66"+
    "\2\0\1\67\1\0\1\70\2\0\1\71\5\0\1\72"+
    "\1\0\1\73\2\0\1\47\1\0\1\74\1\47\1\75"+
    "\2\47\27\0\1\105\51\0\1\106\11\0\1\107\46\0"+
    "\1\47\63\0\1\110\47\0\1\111\23\0\1\47\1\62"+
    "\1\63\1\47\1\64\7\47\1\65\1\74\1\62\1\47"+
    "\1\66\1\62\1\66\2\0\1\67\1\0\1\70\2\0"+
    "\1\71\5\0\1\72\1\0\1\73\2\0\1\47\2\74"+
    "\1\47\1\75\2\47\52\0\1\47\36\0\1\112\60\0"+
    "\1\113\43\0\1\114\61\0\1\115\33\0\1\63\66\0"+
    "\1\116\63\0\1\117\57\0\1\47\57\0\1\120\45\0"+
    "\1\121\45\0\1\122\57\0\1\123\54\0\1\124\61\0"+
    "\1\125\60\0\1\120\43\0\1\47\61\0\1\120\57\0"+
    "\1\126\41\0\1\127\57\0\1\130\64\0\1\131\44\0"+
    "\1\132\14\0\1\133\37\0\1\134\62\0\1\135\64\0"+
    "\1\136\2\0\1\137\33\0\1\140\14\0\1\141\36\0"+
    "\1\142\45\0\1\143\47\0\1\144\3\0\1\137\26\0"+
    "\1\136\1\0\2\137\41\0\1\145\64\0\1\146\2\0"+
    "\1\147\32\0\1\150\50\0\1\151\77\0\1\136\2\0"+
    "\1\152\32\0\1\153\45\0\1\154\47\0\1\155\3\0"+
    "\1\147\26\0\1\146\1\0\2\147\33\0\1\156\71\0"+
    "\1\157\22\0\1\144\3\0\1\152\30\0\2\152\32\0"+
    "\1\160\50\0\1\161\77\0\1\146\2\0\1\162\31\0"+
    "\1\163\57\0\1\164\2\0\1\165\4\0\1\166\4\0"+
    "\1\130\36\0\1\167\71\0\1\170\22\0\1\155\3\0"+
    "\1\162\30\0\2\162\40\0\1\171\54\0\1\172\55\0"+
    "\1\173\60\0\1\174\40\0\1\175\57\0\1\176\2\0"+
    "\1\177\4\0\1\200\4\0\1\134\33\0\1\201\66\0"+
    "\1\202\57\0\1\203\52\0\1\204\51\0\1\205\54\0"+
    "\1\206\55\0\1\207\60\0\1\210\52\0\1\211\41\0"+
    "\1\173\42\0\1\212\32\0\1\130\42\0\1\213\45\0"+
    "\1\214\66\0\1\215\57\0\1\216\52\0\1\217\44\0"+
    "\1\220\100\0\1\221\36\0\1\222\56\0\1\120\41\0"+
    "\1\207\42\0\1\223\32\0\1\134\42\0\1\224\51\0"+
    "\1\225\2\0\1\226\4\0\1\227\4\0\1\130\40\0"+
    "\1\203\76\0\1\230\36\0\1\231\53\0\1\232\55\0"+
    "\1\233\60\0\1\234\43\0\1\235\2\0\1\236\4\0"+
    "\1\237\4\0\1\134\40\0\1\216\61\0\1\240\57\0"+
    "\1\241\52\0\1\242\51\0\1\243\55\0\1\244\60\0"+
    "\1\245\37\0\1\233\42\0\1\212\75\0\1\246\57\0"+
    "\1\247\57\0\1\250\52\0\1\251\52\0\1\252\43\0"+
    "\1\244\42\0\1\223\75\0\1\253\52\0\1\241\60\0"+
    "\1\254\50\0\1\250\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6390];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\1\6\11\1\1\1\11"+
    "\2\1\1\11\10\1\1\11\1\1\1\11\1\1\3\11"+
    "\1\0\1\11\1\0\2\11\1\0\3\11\3\0\1\11"+
    "\2\0\1\11\16\0\1\11\3\0\1\1\7\0\1\11"+
    "\6\0\2\11\73\0\1\11\34\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return null; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter no permitido: <" + yytext() + "> en la linea " + yyline);
            }
            // fall through
          case 36: break;
          case 2:
            { /*System.out.println("Token ESPACIO encontrado, Lexema "+ yytext());/**/
            }
            // fall through
          case 37: break;
          case 3:
            {// System.out.println("Token OP_AR_RTO encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_AR_RTO");
            listaToken.add(t);}
            // fall through
          case 38: break;
          case 4:
            {// System.out.println("Token PAREN_APER encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("PAREN_APER");
            listaToken.add(t);
            }
            // fall through
          case 39: break;
          case 5:
            {// System.out.println("Token PAREN_CIER encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("PAREN_CIER");
            listaToken.add(t);}
            
            // fall through
          case 40: break;
          case 6:
            {// System.out.println("Token OP_AR_MUL encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_AR_MUL");
            listaToken.add(t);}
            
            // fall through
          case 41: break;
          case 7:
            { //System.out.println("Token OP_AR_SUM encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_AR_SUM");
            listaToken.add(t);}
            
            // fall through
          case 42: break;
          case 8:
            { /*0System.out.println("Token COMA encontrado, Lexema "+ yytext());*/
            }
            // fall through
          case 43: break;
          case 9:
            {// System.out.println("Token OP_AR_RES encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_AR_RES");
            listaToken.add(t);}
            
            // fall through
          case 44: break;
          case 10:
            {// System.out.println("Token FLOAT encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("FLOAT");
            listaToken.add(t);}
            
        
            // fall through
          case 45: break;
          case 11:
            { //System.out.println("Token OP_AR_DIV encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_AR_DIV");
            listaToken.add(t);}
            
            // fall through
          case 46: break;
          case 12:
            {// System.out.println("Token CONST_INT, encontrado Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("CONST_INT");
            listaToken.add(t);}
            
            // fall through
          case 47: break;
          case 13:
            {// System.out.println("Token FIN_LINEA encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("FIN_LINEA");
            listaToken.add(t);}
            
            // fall through
          case 48: break;
          case 14:
            { //System.out.println("Token OP_CO_MEN encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_CO_MEN");
            listaToken.add(t);}
            // fall through
          case 49: break;
          case 15:
            {// System.out.println("Token OP_CO_MAY encontrado, Lexema "+ yytext());
                Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("OP_CO_MAY");
                listaToken.add(t);}

            // fall through
          case 50: break;
          case 16:
            {// System.out.println("Token OP_AR_POT encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_AR_POT");
            listaToken.add(t);}

            // fall through
          case 51: break;
          case 17:
            {// System.out.println("Token VAR encontrado, Lexema "+ yytext());
                Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("VAR");
                listaToken.add(t);}
            // fall through
          case 52: break;
          case 18:
            {//System.out.println("Token LLAVE_APER encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("LLAVE_APER");
            listaToken.add(t);}

            // fall through
          case 53: break;
          case 19:
            {// System.out.println("Token LLAVE_CIER encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("LLAVE_CIER");
            listaToken.add(t);}
            // fall through
          case 54: break;
          case 20:
            { //System.out.println("Token OP_LO_NOT encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_LO_NOT");
            listaToken.add(t);}
            // fall through
          case 55: break;
          case 21:
            {// System.out.println("Token OP_CO_DIS encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_CO_DIS");
            listaToken.add(t);}
            // fall through
          case 56: break;
          case 22:
            { //System.out.println("Token CONST_STRING, encontrado Lexema "+ yytext());
             if (yytext().length() <= 30) {	
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("CONST_STRING");
                t.setValor(yytext());
                t.setLongitud(yytext().length());
                listaToken.add(t);
                } else {
                	throw new Error("Excede la Longitud Maxima de un String, debe ser menor a 30 ");
                }
            }
            
            // fall through
          case 57: break;
          case 23:
            {//System.out.println("Token OP_LO_AND encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_LO_AND");
            listaToken.add(t);}
            // fall through
          case 58: break;
          case 24:
            {//System.out.println("Token ASIGNACION encontrado, Lexema "+ yytext());
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("ASIGNACION");
                listaToken.add(t);}
            // fall through
          case 59: break;
          case 25:
            {//System.out.println("Token OP_CO_MEN_IGU encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_CO_MEN");
            listaToken.add(t);}
            // fall through
          case 60: break;
          case 26:
            {//System.out.println("Token OP_CO_IGU encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("OP_CO_IGU");
            listaToken.add(t);}
            // fall through
          case 61: break;
          case 27:
            {//System.out.println("Token OP_CO_MAY_IGU encontrado, Lexema "+ yytext());
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("OP_CO_MAY_IGU");
                listaToken.add(t);}
            // fall through
          case 62: break;
          case 28:
            {//System.out.println("Token IF encontrado, Lexema "+ yytext());
            Token t = new Token(); 
            t.setLexema(yytext());
            t.setToken("IF");
            listaToken.add(t);}
            // fall through
          case 63: break;
          case 29:
            {//System.out.println("Token OP_LO_OR encontrado, Lexema "+ yytext());
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("OP_LO_OR");
                listaToken.add(t);}
            // fall through
          case 64: break;
          case 30:
            {//System.out.println("Token FOR encontrado, Lexema "+ yytext());
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("FOR");
                listaToken.add(t);}
            // fall through
          case 65: break;
          case 31:
            {//System.out.println("Token COMENTARIO encontrado, Lexema "+ yytext());
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("COMENTARIO");
                t.setLongitud(yytext().length());
                listaToken.add(t);}
            // fall through
          case 66: break;
          case 32:
            {// System.out.println("Token OP_TRUE encontrado, Lexema "+ yytext());
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("OP_TRUE");
                listaToken.add(t);}
            // fall through
          case 67: break;
          case 33:
            {//System.out.println("Token OP_FALSE encontrado, Lexema "+ yytext());
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("OP_FALSE");
                listaToken.add(t);}
            // fall through
          case 68: break;
          case 34:
            {//System.out.println("Token WHILE encontrado, Lexema "+ yytext());
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("WHILE");
                listaToken.add(t);}
            // fall through
          case 69: break;
          case 35:
            {//System.out.println("Token DECLARACION encontrado, Lexema "+ yytext());
            	Token t = new Token(); 
                t.setLexema(yytext());
                t.setToken("DECLARACION");
                listaToken.add(t);}
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }
  public void setListaToken(List<Token> lista) {this.listaToken = lista;} //Defino la lista que utilizaremos para los token
  public List<Token> getListToken() {return listaToken;} //Nos devolvera la lista con todos los tokems

}
