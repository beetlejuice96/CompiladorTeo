package org.example;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {
	private List<Regla> listaReglas = new ArrayList<>();

	public List<Regla> getListaReglas() {
		return listaReglas;
	}

	public void setListaReglas(List<Regla> listaReglas) {
		this.listaReglas = listaReglas;
	}
 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\003\012\000\002\005" +
    "\003\000\002\005\005\000\002\011\005\000\002\011\005" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\012\003\000\002\012" +
    "\003\000\002\006\003\000\002\006\005\000\002\013\005" +
    "\000\002\015\005\000\002\015\006\000\002\014\007\000" +
    "\002\014\007\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\023\004\000\002\016\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\027\003\000\002" +
    "\027\003\000\002\017\003\000\002\017\003\000\002\021" +
    "\011\000\002\020\005\000\002\022\007\000\002\030\003" +
    "\000\002\030\003\000\002\031\007\000\002\032\010\000" +
    "\002\033\004\000\002\033\004\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\037\005\000\002" +
    "\036\006\000\002\040\007\000\002\041\005\000\002\042" +
    "\003\000\002\042\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\007\000\002\045\010\000\002\046\003\000" +
    "\002\046\003\000\002\047\006\000\002\050\007\000\002" +
    "\002\003\000\002\051\005\000\002\051\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\061\005\065\010\001\002\000\004\065" +
    "\230\001\002\000\004\013\207\001\002\000\004\002\uffb4" +
    "\001\002\000\004\002\205\001\002\000\016\004\024\016" +
    "\036\017\017\021\016\024\040\070\033\001\002\000\022" +
    "\004\uffc4\011\uffc4\016\uffc4\017\uffc4\021\uffc4\024\uffc4\066" +
    "\uffc4\070\uffc4\001\002\000\024\004\uffbc\011\uffbc\016\uffbc" +
    "\017\uffbc\021\uffbc\023\uffbc\024\uffbc\066\uffbc\070\uffbc\001" +
    "\002\000\022\004\uffcb\011\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\024\uffcb\066\uffcb\070\uffcb\001\002\000\022\004\uffd4\011" +
    "\uffd4\016\uffd4\017\uffd4\021\uffd4\024\uffd4\066\uffd4\070\uffd4" +
    "\001\002\000\022\004\uffd5\011\uffd5\016\uffd5\017\uffd5\021" +
    "\uffd5\024\uffd5\066\uffd5\070\uffd5\001\002\000\004\006\154" +
    "\001\002\000\004\006\154\001\002\000\022\004\uffc7\011" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\024\uffc7\066\uffc7\070\uffc7" +
    "\001\002\000\022\004\uffb7\011\uffb7\016\uffb7\017\uffb7\021" +
    "\uffb7\024\uffb7\066\uffb7\070\uffb7\001\002\000\022\004\uffc8" +
    "\011\uffc8\016\uffc8\017\uffc8\021\uffc8\024\uffc8\066\uffc8\070" +
    "\uffc8\001\002\000\020\004\024\016\036\017\017\021\016" +
    "\024\040\066\147\070\136\001\002\000\004\030\146\001" +
    "\002\000\022\004\uffb8\011\uffb8\016\uffb8\017\uffb8\021\uffb8" +
    "\024\uffb8\066\uffb8\070\uffb8\001\002\000\024\004\uffbe\011" +
    "\uffbe\016\uffbe\017\uffbe\021\uffbe\023\141\024\uffbe\066\uffbe" +
    "\070\uffbe\001\002\000\022\004\uffc6\011\uffc6\016\uffc6\017" +
    "\uffc6\021\uffc6\024\uffc6\066\uffc6\070\uffc6\001\002\000\022" +
    "\004\uffbd\011\uffbd\016\uffbd\017\uffbd\021\uffbd\024\uffbd\066" +
    "\uffbd\070\uffbd\001\002\000\024\004\uffbb\011\uffbb\016\uffbb" +
    "\017\uffbb\021\uffbb\023\uffbb\024\uffbb\066\uffbb\070\uffbb\001" +
    "\002\000\004\010\127\001\002\000\022\004\uffc5\011\uffc5" +
    "\016\uffc5\017\uffc5\021\uffc5\024\uffc5\066\uffc5\070\uffc5\001" +
    "\002\000\022\004\uffc3\011\uffc3\016\uffc3\017\uffc3\021\uffc3" +
    "\024\uffc3\066\uffc3\070\uffc3\001\002\000\022\004\uffca\011" +
    "\uffca\016\uffca\017\uffca\021\uffca\024\uffca\066\uffca\070\uffca" +
    "\001\002\000\004\037\050\001\002\000\022\004\uffc9\011" +
    "\uffc9\016\uffc9\017\uffc9\021\uffc9\024\uffc9\066\uffc9\070\uffc9" +
    "\001\002\000\004\016\041\001\002\000\004\037\046\001" +
    "\002\000\004\026\043\001\002\000\004\027\044\001\002" +
    "\000\004\025\045\001\002\000\004\010\uffc0\001\002\000" +
    "\004\027\047\001\002\000\004\026\uffbf\001\002\000\014" +
    "\005\061\006\051\016\054\027\056\031\053\001\002\000" +
    "\014\005\061\006\051\016\054\027\056\031\053\001\002" +
    "\000\050\004\uffe3\007\uffe3\011\uffe3\016\uffe3\017\uffe3\021" +
    "\uffe3\024\uffe3\043\uffe3\044\uffe3\047\uffe3\050\120\051\121" +
    "\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\066\uffe3\070" +
    "\uffe3\001\002\000\050\004\uffde\007\uffde\011\uffde\016\uffde" +
    "\017\uffde\021\uffde\024\uffde\043\uffde\044\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\066\uffde\070\uffde\001\002\000\050\004\uffdb\007\uffdb\011" +
    "\uffdb\016\uffdb\017\uffdb\021\uffdb\024\uffdb\043\uffdb\044\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\066\uffdb\070\uffdb\001\002\000\026\004\uffe6" +
    "\011\uffe6\016\uffe6\017\uffe6\021\uffe6\024\uffe6\044\116\047" +
    "\115\066\uffe6\070\uffe6\001\002\000\050\004\uffdf\007\uffdf" +
    "\011\uffdf\016\uffdf\017\uffdf\021\uffdf\024\uffdf\043\uffdf\044" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\066\uffdf\070\uffdf\001\002\000\050\004" +
    "\uffe0\007\uffe0\011\uffe0\016\uffe0\017\uffe0\021\uffe0\024\uffe0" +
    "\043\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\066\uffe0\070\uffe0\001\002" +
    "\000\050\004\uffdc\007\uffdc\011\uffdc\016\uffdc\017\uffdc\021" +
    "\uffdc\024\uffdc\043\uffdc\044\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\066\uffdc\070" +
    "\uffdc\001\002\000\004\006\062\001\002\000\004\064\064" +
    "\001\002\000\004\012\105\001\002\000\016\043\073\052" +
    "\075\053\072\054\074\055\100\056\077\001\002\000\010" +
    "\012\uffff\040\067\041\070\001\002\000\004\064\064\001" +
    "\002\000\006\006\ufff3\064\ufff3\001\002\000\006\006\ufff2" +
    "\064\ufff2\001\002\000\004\012\ufffe\001\002\000\016\005" +
    "\ufff9\006\ufff9\016\ufff9\027\ufff9\031\ufff9\032\ufff9\001\002" +
    "\000\016\005\ufffb\006\ufffb\016\ufffb\027\ufffb\031\ufffb\032" +
    "\ufffb\001\002\000\016\005\ufff8\006\ufff8\016\ufff8\027\ufff8" +
    "\031\ufff8\032\ufff8\001\002\000\016\005\ufffa\006\ufffa\016" +
    "\ufffa\027\ufffa\031\ufffa\032\ufffa\001\002\000\010\016\101" +
    "\027\103\032\104\001\002\000\016\005\ufff6\006\ufff6\016" +
    "\ufff6\027\ufff6\031\ufff6\032\ufff6\001\002\000\016\005\ufff7" +
    "\006\ufff7\016\ufff7\027\ufff7\031\ufff7\032\ufff7\001\002\000" +
    "\010\012\ufffc\040\ufffc\041\ufffc\001\002\000\010\012\ufffd" +
    "\040\ufffd\041\ufffd\001\002\000\010\012\ufff5\040\ufff5\041" +
    "\ufff5\001\002\000\010\012\ufff4\040\ufff4\041\ufff4\001\002" +
    "\000\004\013\106\001\002\000\004\016\107\001\002\000" +
    "\006\012\ufff1\014\ufff1\001\002\000\006\012\111\014\112" +
    "\001\002\000\004\016\114\001\002\000\004\007\113\001" +
    "\002\000\050\004\000\007\000\011\000\016\000\017\000" +
    "\021\000\024\000\043\000\044\000\047\000\050\000\051" +
    "\000\052\000\053\000\054\000\055\000\056\000\066\000" +
    "\070\000\001\002\000\006\012\ufff0\014\ufff0\001\002\000" +
    "\014\005\061\006\051\016\054\027\056\031\053\001\002" +
    "\000\014\005\061\006\051\016\054\027\056\031\053\001" +
    "\002\000\050\004\uffe5\007\uffe5\011\uffe5\016\uffe5\017\uffe5" +
    "\021\uffe5\024\uffe5\043\uffe5\044\uffe5\047\uffe5\050\120\051" +
    "\121\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\066\uffe5" +
    "\070\uffe5\001\002\000\014\005\061\006\051\016\054\027" +
    "\056\031\053\001\002\000\014\005\061\006\051\016\054" +
    "\027\056\031\053\001\002\000\050\004\uffe1\007\uffe1\011" +
    "\uffe1\016\uffe1\017\uffe1\021\uffe1\024\uffe1\043\uffe1\044\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\056\uffe1\066\uffe1\070\uffe1\001\002\000\050\004\uffe2" +
    "\007\uffe2\011\uffe2\016\uffe2\017\uffe2\021\uffe2\024\uffe2\043" +
    "\uffe2\044\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\066\uffe2\070\uffe2\001\002\000" +
    "\050\004\uffe4\007\uffe4\011\uffe4\016\uffe4\017\uffe4\021\uffe4" +
    "\024\uffe4\043\uffe4\044\uffe4\047\uffe4\050\120\051\121\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\066\uffe4\070\uffe4" +
    "\001\002\000\010\007\126\044\116\047\115\001\002\000" +
    "\050\004\uffdd\007\uffdd\011\uffdd\016\uffdd\017\uffdd\021\uffdd" +
    "\024\uffdd\043\uffdd\044\uffdd\047\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\066\uffdd\070\uffdd" +
    "\001\002\000\020\004\024\011\130\016\036\017\017\021" +
    "\016\024\040\070\033\001\002\000\022\004\uffc2\011\uffc2" +
    "\016\uffc2\017\uffc2\021\uffc2\024\uffc2\066\uffc2\070\uffc2\001" +
    "\002\000\020\004\024\011\132\016\036\017\017\021\016" +
    "\024\040\070\136\001\002\000\022\004\uffc1\011\uffc1\016" +
    "\uffc1\017\uffc1\021\uffc1\024\uffc1\066\uffc1\070\uffc1\001\002" +
    "\000\022\004\uffcd\011\uffcd\016\uffcd\017\uffcd\021\uffcd\024" +
    "\uffcd\066\uffcd\070\uffcd\001\002\000\022\004\uffce\011\uffce" +
    "\016\uffce\017\uffce\021\uffce\024\uffce\066\uffce\070\uffce\001" +
    "\002\000\022\004\uffcc\011\uffcc\016\uffcc\017\uffcc\021\uffcc" +
    "\024\uffcc\066\uffcc\070\uffcc\001\002\000\022\004\uffd0\011" +
    "\uffd0\016\uffd0\017\uffd0\021\uffd0\024\uffd0\066\uffd0\070\uffd0" +
    "\001\002\000\022\004\uffd1\011\uffd1\016\uffd1\017\uffd1\021" +
    "\uffd1\024\uffd1\066\uffd1\070\uffd1\001\002\000\022\004\uffcf" +
    "\011\uffcf\016\uffcf\017\uffcf\021\uffcf\024\uffcf\066\uffcf\070" +
    "\uffcf\001\002\000\004\010\142\001\002\000\020\004\024" +
    "\011\143\016\036\017\017\021\016\024\040\070\033\001" +
    "\002\000\022\004\uffb6\011\uffb6\016\uffb6\017\uffb6\021\uffb6" +
    "\024\uffb6\066\uffb6\070\uffb6\001\002\000\020\004\024\011" +
    "\145\016\036\017\017\021\016\024\040\070\136\001\002" +
    "\000\022\004\uffb5\011\uffb5\016\uffb5\017\uffb5\021\uffb5\024" +
    "\uffb5\066\uffb5\070\uffb5\001\002\000\022\004\uffe7\011\uffe7" +
    "\016\uffe7\017\uffe7\021\uffe7\024\uffe7\066\uffe7\070\uffe7\001" +
    "\002\000\004\002\uffb3\001\002\000\006\020\uffd9\022\uffd9" +
    "\001\002\000\006\040\067\041\070\001\002\000\006\020" +
    "\uffda\022\uffda\001\002\000\004\020\166\001\002\000\014" +
    "\005\061\006\051\016\054\027\056\031\053\001\002\000" +
    "\024\007\156\043\073\044\116\047\115\052\075\053\072" +
    "\054\074\055\100\056\077\001\002\000\016\043\073\052" +
    "\075\053\072\054\074\055\100\056\077\001\002\000\014" +
    "\005\061\006\051\016\054\027\056\031\053\001\002\000" +
    "\010\007\161\044\116\047\115\001\002\000\012\020\uffd6" +
    "\022\uffd6\040\uffd6\041\uffd6\001\002\000\004\006\163\001" +
    "\002\000\014\005\061\006\051\016\054\027\056\031\053" +
    "\001\002\000\010\007\165\044\116\047\115\001\002\000" +
    "\006\020\uffd8\022\uffd8\001\002\000\004\010\167\001\002" +
    "\000\020\004\024\011\170\016\036\017\017\021\016\024" +
    "\040\070\033\001\002\000\022\004\uffd3\011\uffd3\016\uffd3" +
    "\017\uffd3\021\uffd3\024\uffd3\066\uffd3\070\uffd3\001\002\000" +
    "\020\004\024\011\172\016\036\017\017\021\016\024\040" +
    "\070\136\001\002\000\022\004\uffd2\011\uffd2\016\uffd2\017" +
    "\uffd2\021\uffd2\024\uffd2\066\uffd2\070\uffd2\001\002\000\004" +
    "\006\175\001\002\000\006\020\uffd7\022\uffd7\001\002\000" +
    "\014\005\061\006\051\016\054\027\056\031\053\001\002" +
    "\000\022\043\073\044\116\047\115\052\075\053\072\054" +
    "\074\055\100\056\077\001\002\000\004\022\200\001\002" +
    "\000\004\010\201\001\002\000\020\004\024\011\202\016" +
    "\036\017\017\021\016\024\040\070\033\001\002\000\024" +
    "\004\uffba\011\uffba\016\uffba\017\uffba\021\uffba\023\uffba\024" +
    "\uffba\066\uffba\070\uffba\001\002\000\020\004\024\011\204" +
    "\016\036\017\017\021\016\024\040\070\136\001\002\000" +
    "\024\004\uffb9\011\uffb9\016\uffb9\017\uffb9\021\uffb9\023\uffb9" +
    "\024\uffb9\066\uffb9\070\uffb9\001\002\000\004\002\001\001" +
    "\002\000\004\062\227\001\002\000\004\016\210\001\002" +
    "\000\006\012\214\014\215\001\002\000\004\014\212\001" +
    "\002\000\006\013\207\062\uffee\001\002\000\004\062\uffed" +
    "\001\002\000\004\016\210\001\002\000\004\037\216\001" +
    "\002\000\004\013\217\001\002\000\010\032\223\033\221" +
    "\034\220\001\002\000\006\012\uffea\014\uffea\001\002\000" +
    "\006\012\uffe8\014\uffe8\001\002\000\006\012\uffeb\014\uffeb" +
    "\001\002\000\006\012\uffe9\014\uffe9\001\002\000\004\012" +
    "\225\001\002\000\010\032\223\033\221\034\220\001\002" +
    "\000\006\012\uffec\014\uffec\001\002\000\004\065\uffef\001" +
    "\002\000\016\004\024\016\036\017\017\021\016\024\040" +
    "\070\033\001\002\000\020\004\024\016\036\017\017\021" +
    "\016\024\040\066\232\070\136\001\002\000\004\002\uffb2" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\002\006\013\003\051\005\001\001\000" +
    "\002\001\001\000\004\015\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\016\034\023\036\030\021\031" +
    "\014\032\013\033\022\034\012\035\026\036\033\037\010" +
    "\040\031\042\017\043\025\044\011\045\030\046\027\047" +
    "\024\050\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\176\020\151\021\147\022\150\001\001\000\012" +
    "\017\152\020\151\021\147\022\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\016\136" +
    "\023\137\030\133\031\014\032\013\035\134\036\033\037" +
    "\010\040\031\042\132\043\025\044\011\045\030\046\027" +
    "\047\024\050\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\057\025\054\026\051\027\056\001\001\000\012\003\057" +
    "\025\124\026\051\027\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\062\011\064\001\001\000\002\001\001" +
    "\000\004\007\075\001\001\000\004\012\065\001\001\000" +
    "\004\011\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\057\026\123\027" +
    "\056\001\001\000\010\003\057\026\116\027\056\001\001" +
    "\000\002\001\001\000\006\003\057\027\122\001\001\000" +
    "\006\003\057\027\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\016\034\023\036\030\021\031\014\032\013" +
    "\033\130\034\012\035\026\036\033\037\010\040\031\042" +
    "\017\043\025\044\011\045\030\046\027\047\024\050\020" +
    "\001\001\000\002\001\001\000\042\016\136\023\137\030" +
    "\133\031\014\032\013\035\134\036\033\037\010\040\031" +
    "\042\132\043\025\044\011\045\030\046\027\047\024\050" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\016\034" +
    "\023\036\030\021\031\014\032\013\033\143\034\012\035" +
    "\026\036\033\037\010\040\031\042\017\043\025\044\011" +
    "\045\030\046\027\047\024\050\020\001\001\000\002\001" +
    "\001\000\042\016\136\023\137\030\133\031\014\032\013" +
    "\035\134\036\033\037\010\040\031\042\132\043\025\044" +
    "\011\045\030\046\027\047\024\050\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\057\025\154\026\051\027\056\001" +
    "\001\000\004\007\156\001\001\000\004\007\161\001\001" +
    "\000\012\003\057\025\157\026\051\027\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\057\025\163\026\051\027\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\016\034" +
    "\023\036\030\021\031\014\032\013\033\170\034\012\035" +
    "\026\036\033\037\010\040\031\042\017\043\025\044\011" +
    "\045\030\046\027\047\024\050\020\001\001\000\002\001" +
    "\001\000\042\016\136\023\137\030\133\031\014\032\013" +
    "\035\134\036\033\037\010\040\031\042\132\043\025\044" +
    "\011\045\030\046\027\047\024\050\020\001\001\000\002" +
    "\001\001\000\004\022\173\001\001\000\002\001\001\000" +
    "\012\003\057\025\175\026\051\027\056\001\001\000\004" +
    "\007\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\016\034\023\036\030\021\031\014\032\013\033\202" +
    "\034\012\035\026\036\033\037\010\040\031\042\017\043" +
    "\025\044\011\045\030\046\027\047\024\050\020\001\001" +
    "\000\002\001\001\000\042\016\136\023\137\030\133\031" +
    "\014\032\013\035\134\036\033\037\010\040\031\042\132" +
    "\043\025\044\011\045\030\046\027\047\024\050\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\212\001\001\000\002\001\001\000\004" +
    "\014\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\016\034\023\036\030\021\031\014\032\013\033" +
    "\230\034\012\035\026\036\033\037\010\040\031\042\017" +
    "\043\025\044\011\045\030\046\027\047\024\050\020\001" +
    "\001\000\042\016\136\023\137\030\133\031\014\032\013" +
    "\035\134\036\033\037\010\040\031\042\132\043\025\044" +
    "\011\045\030\046\027\047\024\050\020\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + " no reconocido. valor " + s.value );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_ EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // funcion_filter ::= FILTER PAREN_APER condicion_filter COMA CORCHETE_APER lista CORCHETE_CIER PAREN_CIER 
            {
              Object RESULT =null;
		int filter_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int filter_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object filter_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int par_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int par_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object par_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int con_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int con_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object con_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int coma_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int coma_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object coma_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cor_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cor_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cor_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lis_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lis_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lis_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cor_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cor_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cor_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int par_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int par_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+filter_+""+par_a+""+con_+""+coma_+""+cor_a+""+lis_+""+cor_c+""+par_c ;Regla regla = new Regla(1,RESULT,"funcion_filter ::= FILTER PAREN_APER condicion_filter COMA CORCHETE_APER lista CORCHETE_CIER PAREN_CIER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_filter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // condicion_filter ::= condi 
            {
              Object RESULT =null;
		int con_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int con_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object con_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+con_; Regla regla = new Regla(2,RESULT,"condicion_filter ::= condi ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_filter",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // condicion_filter ::= condi olog condi 
            {
              Object RESULT =null;
		int condi_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condi_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object condi_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int log_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int log_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int con_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int con_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object con_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+condi_+""+log_+""+con_; Regla regla = new Regla(3,RESULT,"condicion_filter ::= condi olog condi ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_filter",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // condi ::= GUION ocomp numero 
            {
              Object RESULT =null;
		int gion_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gion_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object gion_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ocomp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ocomp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ocomp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nro_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nro_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nro_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+gion_+""+ocomp_+""+nro_;Regla regla = new Regla(4,RESULT,"condi ::= GUION ocomp numero ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condi",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // condi ::= GUION ocomp VAR 
            {
              Object RESULT =null;
		int gion_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gion_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object gion_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ocomp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ocomp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ocomp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+gion_+""+ocomp_+""+id_;Regla regla = new Regla(5,RESULT,"condi ::= GUION ocomp VAR");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condi",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ocomp ::= OP_CO_IGU 
            {
              Object RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int igright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+ig;Regla regla = new Regla(6,RESULT,"ocomp ::= OP_CO_IGU ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ocomp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ocomp ::= OP_CO_MAY 
            {
              Object RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object may = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+may;Regla regla = new Regla(7,RESULT,"ocomp ::= OP_CO_MAY");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ocomp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ocomp ::= OP_CO_MEN 
            {
              Object RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object men = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+men;Regla regla = new Regla(8,RESULT,"ocomp ::= OP_CO_MEN");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ocomp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ocomp ::= OP_CO_MEN_IGU 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+c;Regla regla = new Regla(9,RESULT,"ocomp ::= OP_CO_MEN_IGU");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ocomp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ocomp ::= OP_CO_MAY_IGU 
            {
              Object RESULT =null;
		int may_igleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int may_igright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object may_ig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+may_ig;Regla regla = new Regla(10,RESULT,"ocomp ::= OP_CO_MAY_IGU "); listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ocomp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ocomp ::= OP_CO_DIS 
            {
              Object RESULT =null;
		int disleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int disright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+dis; Regla regla = new Regla(11,RESULT,"ocomp ::= OP_CO_DIS");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ocomp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numero ::= CONST_INT 
            {
              Object RESULT =null;
		int inteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int interight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inte = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+inte;Regla regla = new Regla(12,RESULT,"numero ::= CONST_INT"); listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numero ::= FLOAT 
            {
              Object RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+real;Regla regla = new Regla(13,RESULT,"numero ::= FLOAT ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // olog ::= OP_LO_AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+and;Regla regla = new Regla(14,RESULT,"olog ::= OP_LO_AND");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("olog",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // olog ::= OP_LO_OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+or;Regla regla = new Regla(15,RESULT,"olog ::= OP_LO_OR");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("olog",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista ::= VAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id; Regla regla = new Regla(16,RESULT,"lista ::= VAR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista ::= lista COMA VAR 
            {
              Object RESULT =null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int com_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int com_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+lis+""+""+com_+""+id;Regla regla = new Regla(17,RESULT,"lista ::= lista COMA VAR"); listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaraciones ::= DECLARE d ENDDECLARE 
            {
              Object RESULT =null;
		int beg_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beg_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object beg_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int end_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int end_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object end_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+beg_+""+d_+""+end_;Regla regla = new Regla(18,RESULT,"declaraciones ::= DECLARE d ENDDECLARE");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // d ::= CORCHETE_APER a CORCHETE_CIER 
            {
              Object RESULT =null;
		int cor_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cor_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cor_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cor_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cor_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cor_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cor_a+""+a_+""+cor_c;Regla regla = new Regla(19,RESULT,"d ::= CORCHETE_APER a CORCHETE_CIER ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // d ::= CORCHETE_APER a CORCHETE_CIER d 
            {
              Object RESULT =null;
		int cor_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cor_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cor_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cor_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cor_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cor_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cor_a+""+a_+""+cor_c+""+d_;Regla regla = new Regla(20,RESULT,"d ::= CORCHETE_APER a CORCHETE_CIER d ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // a ::= VAR COMA a COMA tipos_datos 
            {
              Object RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int com1_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int com1_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object com1_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int com2_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int com2_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com2_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tip_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tip_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tip_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+id_+""+com1_+""+a_+""+com2_+""+tip_;Regla regla = new Regla(21,RESULT,"a ::= VAR COMA a COMA tipos_datos");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // a ::= VAR CORCHETE_CIER ASIGNACION CORCHETE_APER tipos_datos 
            {
              Object RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cor_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cor_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cor_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asig_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asig_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object asig_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cor_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cor_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cor_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tip_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tip_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tip_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+id_+""+cor_c+""+asig_+""+cor_a+""+tip_;Regla regla = new Regla(22,RESULT,"a ::= VAR CORCHETE_CIER ASIGNACION CORCHETE_APER tipos_datos");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipos_datos ::= INTEGER 
            {
              Object RESULT =null;
		int int_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int int_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object int_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+int_;Regla regla = new Regla(23,RESULT,"tipos_datos ::= INTEGER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_datos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipos_datos ::= FLOAT 
            {
              Object RESULT =null;
		int fltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object flt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+flt;Regla regla = new Regla(24,RESULT,"tipos_datos ::= FLOAT"); listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_datos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipos_datos ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+str;Regla regla = new Regla(25,RESULT,"tipos_datos ::= STRING");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_datos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mostrar ::= PRINT CONST_STRING 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+p+""+cs;Regla regla = new Regla(26,RESULT,"mostrar ::= PRINT CONST_STRING");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mostrar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignacion_simple ::= VAR ASIGNACION expresion 
            {
              Object RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asig_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asig_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object asig_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+id_+""+asig_+""+exp_;Regla regla = new Regla(27,RESULT,"asignacion_simple ::= VAR ASIGNACION expresion");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_simple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion OP_AR_SUM termino 
            {
              Object RESULT =null;
		int exp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sum_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sum_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sum_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+exp_+""+sum_+""+t_;Regla regla = new Regla(28,RESULT,"expresion ::= expresion OP_AR_SUM termino ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion OP_AR_RES termino 
            {
              Object RESULT =null;
		int exp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int res_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int res_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object res_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+exp_+""+res_+""+t_;Regla regla = new Regla(29,RESULT,"expresion ::= expresion OP_AR_RES termino");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= termino 
            {
              Object RESULT =null;
		int t_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+t_;Regla regla = new Regla(30,RESULT,"expresion ::= termino");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // termino ::= termino OP_AR_MUL factor 
            {
              Object RESULT =null;
		int t_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mul_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mul_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mul_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+t_+""+mul_+""+f_;Regla regla = new Regla(31,RESULT,"termino ::= termino OP_AR_MUL factor ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // termino ::= termino OP_AR_DIV factor 
            {
              Object RESULT =null;
		int t_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int div_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int div_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object div_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =""+ t_+""+div_+""+f_;Regla regla = new Regla(32,RESULT,"termino ::= termino OP_AR_DIV factor");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // termino ::= factor 
            {
              Object RESULT =null;
		int f_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+f_;Regla regla = new Regla(33,RESULT,"termino ::= factor");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= CONST_INT 
            {
              Object RESULT =null;
		int int_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int int_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object int_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =""+int_;Regla regla = new Regla(34,RESULT,"factor ::= CONST_INT" );listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= CONST_FLOAT 
            {
              Object RESULT =null;
		int flt_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flt_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object flt_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =""+flt_;Regla regla = new Regla(35,RESULT,"factor ::= CONST_FLOAT ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= PAREN_APER expresion PAREN_CIER 
            {
              Object RESULT =null;
		int par_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int par_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object par_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int par_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int par_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =""+par_a+""+exp_+""+par_c;Regla regla = new Regla(36,RESULT,"factor ::= PAREN_APER expresion PAREN_CIER ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= funcion_filter 
            {
              Object RESULT =null;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =""+ff;Regla regla = new Regla(37,RESULT,"factor ::= funcion_filter");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= VAR 
            {
              Object RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+id_;Regla regla = new Regla(38,RESULT,"factor ::= VAR ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condiciones ::= condicion_multiple 
            {
              Object RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+cm;Regla regla = new Regla(39,RESULT,"condiciones ::= condicion_multiple");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condiciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condiciones ::= condicion_simple 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cs;Regla regla = new Regla(40,RESULT,"condiciones ::= condicion_simple");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condiciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicion_simple ::= PAREN_APER expresion PAREN_CIER ocomp PAREN_APER expresion PAREN_CIER 
            {
              Object RESULT =null;
		int par_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int par_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object par_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object exp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int par_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int par_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object par_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ocomp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ocomp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ocomp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int par2_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int par2_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object par2_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp2_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int par2_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int par2_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par2_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+par_a+""+exp_+""+par_c+""+ocomp_+""+par2_a+""+exp2_+""+par2_c;Regla regla = new Regla(41,RESULT,"condicion_simple ::= PAREN_APER expresion PAREN_CIER ocomp PAREN_APER expresion PAREN_CIER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_simple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicion_multiple ::= condicion_mul olog condicion_mul 
            {
              Object RESULT =null;
		int re1_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int re1_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object re1_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int olog_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olog_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object olog_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int re2_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int re2_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object re2_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+re1_+""+olog_+""+re2_;Regla regla = new Regla(42,RESULT,"condicion_multiple ::= condicion_mul olog condicion_mul");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_multiple",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicion_mul ::= PAREN_APER expresion ocomp expresion PAREN_CIER 
            {
              Object RESULT =null;
		int par_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int par_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object par_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object exp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ocomp_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ocomp_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ocomp_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp2_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int par2_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int par2_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par2_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+par_a+""+exp_+""+ocomp_+""+exp2_+""+par2_c;Regla regla = new Regla(43,RESULT,"condicion_mul ::= PAREN_APER expresion ocomp expresion PAREN_CIER ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_mul",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while ::= vacio 
            {
              Object RESULT =null;
		int va_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int va_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object va_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+va_;Regla regla = new Regla(44,RESULT,"while ::= vacio ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while ::= completo 
            {
              Object RESULT =null;
		int co_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int co_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object co_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =""+ co_;Regla regla = new Regla(45,RESULT,"while ::= completo");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vacio ::= WHILE_INICIO condiciones WHILE_FIN LLAVE_APER LLAVE_CIER 
            {
              Object RESULT =null;
		int wi_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wi_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object wi_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int con_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int con_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object con_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wf_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wf_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object wf_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lla_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lla_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lla_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lla_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lla_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lla_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =""+ wi_+""+con_+""+wf_+""+lla_a+""+lla_c;Regla regla = new Regla(46,RESULT,"vacio ::= WHILE_INICIO condiciones WHILE_FIN LLAVE_APER LLAVE_CIER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vacio",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // completo ::= WHILE_INICIO condiciones WHILE_FIN LLAVE_APER contenido LLAVE_CIER 
            {
              Object RESULT =null;
		int wi_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int wi_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object wi_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int con_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int con_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object con_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wf_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wf_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object wf_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lla_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lla_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lla_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lla_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lla_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lla_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+wi_+""+con_+""+wf_+""+lla_a+""+cont_+""+lla_c;Regla regla = new Regla(47,RESULT,"completo ::= WHILE_INICIO condiciones WHILE_FIN LLAVE_APER contenido LLAVE_CIER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("completo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contenido ::= contenido asignacion_simple 
            {
              Object RESULT =null;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int as_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int as_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object as_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cont_+""+as_;Regla regla = new Regla(48,RESULT,"contenido ::= contenido asignacion_simple ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contenido ::= contenido COMENTARIO 
            {
              Object RESULT =null;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cm_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cm_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cm_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =""+ cont_+""+cm_;Regla regla = new Regla(49,RESULT,"contenido ::= contenido COMENTARIO");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenido ::= contenido mostrar 
            {
              Object RESULT =null;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mst_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mst_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mst_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cont_+""+mst_;Regla regla = new Regla(50,RESULT,"contenido ::= contenido mostrar");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenido ::= contenido while 
            {
              Object RESULT =null;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int w_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int w_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cont_+""+w_;Regla regla = new Regla(51,RESULT,"contenido ::= contenido while");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenido ::= contenido if 
            {
              Object RESULT =null;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cont_+""+i_;Regla regla = new Regla(52,RESULT,"contenido ::= contenido if ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenido ::= contenido for 
            {
              Object RESULT =null;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cont_+""+f_;Regla regla = new Regla(53,RESULT,"contenido ::= contenido for");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenido ::= con 
            {
              Object RESULT =null;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cont_;Regla regla = new Regla(54,RESULT,"contenido ::= con ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // con ::= asignacion_simple 
            {
              Object RESULT =null;
		int as_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int as_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object as_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+as_;Regla regla = new Regla(55,RESULT,"con ::= asignacion_simple");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("con",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // con ::= mostrar 
            {
              Object RESULT =null;
		int mst_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mst_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mst_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+mst_;Regla regla = new Regla(56,RESULT,"con ::= mostrar ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("con",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // con ::= while 
            {
              Object RESULT =null;
		int w_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int w_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+w_;Regla regla = new Regla(57,RESULT,"con ::= while");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("con",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // con ::= if 
            {
              Object RESULT =null;
		int i_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+i_;Regla regla = new Regla(58,RESULT,"con ::= if");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("con",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // con ::= for 
            {
              Object RESULT =null;
		int f_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+f_;Regla regla = new Regla(59,RESULT,"con ::= for ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("con",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // con ::= COMENTARIO 
            {
              Object RESULT =null;
		int cm_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cm_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cm_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+cm_;Regla regla = new Regla(60,RESULT,"con ::= COMENTARIO");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("con",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // for ::= for_vacio 
            {
              Object RESULT =null;
		int fv_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fv_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fv_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+fv_;Regla regla = new Regla(61,RESULT,"for ::= for_vacio");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for ::= for_con_algo 
            {
              Object RESULT =null;
		int fa_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fa_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fa_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+fa_;Regla regla = new Regla(62,RESULT,"for ::= for_con_algo");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for_vacio ::= f LLAVE_APER LLAVE_CIER 
            {
              Object RESULT =null;
		int f_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lla_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lla_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lla_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lla_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lla_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lla_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+f_+""+lla_a+""+lla_c;Regla regla = new Regla(63,RESULT,"for_vacio ::= f LLAVE_APER LLAVE_CIER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_vacio",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for_con_algo ::= f LLAVE_APER contenido LLAVE_CIER 
            {
              Object RESULT =null;
		int f_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lla_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lla_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lla_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lla_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lla_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lla_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+f_+""+lla_a+""+cont_+""+lla_c;Regla regla = new Regla(64,RESULT,"for_con_algo ::= f LLAVE_APER contenido LLAVE_CIER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_con_algo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // f ::= FOR_INICIO asignacion_for FOR_MEDIO CONST_INT FOR_FIN 
            {
              Object RESULT =null;
		int fi_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fi_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fi_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int af_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int af_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object af_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ft_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ft_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ft_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cnst_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cnst_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cnst_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ff_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ff_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ff_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+fi_+""+af_+""+ft_+""+cnst_+""+ff_;Regla regla = new Regla(65,RESULT,"f ::= FOR_INICIO asignacion_for FOR_MEDIO CONST_INT FOR_FIN ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignacion_for ::= VAR ASIGNACION CONST_INT 
            {
              Object RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asig_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asig_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object asig_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cnst_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnst_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cnst_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id_+""+asig_+""+""+cnst_;Regla regla = new Regla(66,RESULT,"asignacion_for ::= VAR ASIGNACION CONST_INT");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if ::= if_solo 
            {
              Object RESULT =null;
		int is_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int is_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object is_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+is_ ;Regla regla = new Regla(67,RESULT,"if ::= if_solo");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if ::= if_con_else 
            {
              Object RESULT =null;
		int ice_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ice_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ice_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+ice_ ;Regla regla = new Regla(68,RESULT,"if ::= if_con_else");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_solo ::= if_solo_vacio 
            {
              Object RESULT =null;
		int isv_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isv_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object isv_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+isv_;Regla regla = new Regla(69,RESULT,"if_solo ::= if_solo_vacio");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_solo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_solo ::= if_solo_con_algo 
            {
              Object RESULT =null;
		int isc_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isc_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object isc_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+isc_;Regla regla = new Regla(70,RESULT,"if_solo ::= if_solo_con_algo");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_solo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_solo_vacio ::= IF_INICIO condiciones IF_FIN LLAVE_APER LLAVE_CIER 
            {
              Object RESULT =null;
		int ii_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ii_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ii_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cond_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cond_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cond_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int if_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object if_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lla_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lla_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lla_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lla_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lla_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lla_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+ii_+""+cond_+""+if_+""+lla_a+""+lla_c;Regla regla = new Regla(71,RESULT,"if_solo_vacio ::= IF_INICIO condiciones IF_FIN LLAVE_APER LLAVE_CIER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_solo_vacio",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_solo_con_algo ::= IF_INICIO condiciones IF_FIN LLAVE_APER contenido LLAVE_CIER 
            {
              Object RESULT =null;
		int ii_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ii_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ii_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cond_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cond_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int if_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object if_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lla_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lla_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lla_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lla_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lla_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lla_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+ii_+""+cond_+""+if_+""+lla_a+""+cont_+""+lla_c;Regla regla = new Regla(72,RESULT,"if_solo_con_algo ::= IF_INICIO condiciones IF_FIN LLAVE_APER contenido LLAVE_CIER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_solo_con_algo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_con_else ::= if_con_else_vacio 
            {
              Object RESULT =null;
		int iev_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iev_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iev_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+ iev_;Regla regla = new Regla(73,RESULT,"if_con_else ::= if_con_else_vacio ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_con_else",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if_con_else ::= if_con_else_con_algo 
            {
              Object RESULT =null;
		int iec_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iec_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iec_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+iec_ ;Regla regla = new Regla(74,RESULT,"if_con_else ::= if_con_else_con_algo");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_con_else",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if_con_else_vacio ::= if_solo ELSE_IF LLAVE_APER LLAVE_CIER 
            {
              Object RESULT =null;
		int is_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int is_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object is_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ei_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ei_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ei_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lla_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lla_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lla_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lla_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lla_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lla_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+ is_+""+ei_+""+lla_a+""+lla_c;Regla regla = new Regla(75,RESULT,"if_con_else_vacio ::= if_solo ELSE_IF LLAVE_APER LLAVE_CIER");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_con_else_vacio",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if_con_else_con_algo ::= if_solo ELSE_IF LLAVE_APER contenido LLAVE_CIER 
            {
              Object RESULT =null;
		int is_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int is_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object is_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ei_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ei_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ei_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lla_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lla_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lla_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lla_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lla_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lla_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ""+is_+""+ei_+""+lla_a+""+cont_+""+lla_c;Regla regla = new Regla(76,RESULT,"if_con_else_con_algo ::= if_solo ELSE_IF LLAVE_APER contenido LLAVE_CIER ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_con_else_con_algo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // start_ ::= programa 
            {
              Object RESULT =null;
		int pro_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pro_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pro_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+pro_;Regla regla = new Regla(77,RESULT,"start_ ::= programa");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // programa ::= BEGIN contenido END 
            {
              Object RESULT =null;
		int b_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+ b_+""+cont_+""+e_;Regla regla = new Regla(78,RESULT,"programa ::= BEGIN contenido END ");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // programa ::= declaraciones BEGIN contenido END 
            {
              Object RESULT =null;
		int dec_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dec_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dec_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cont_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cont_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cont_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+dec_+""+b_+""+cont_+""+e_;Regla regla = new Regla(79,RESULT,"programa ::= declaraciones BEGIN contenido END");listaReglas.add(regla);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
